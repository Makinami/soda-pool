name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      RUN_FMT:
        description: "Run fmt job"
        required: true
        type: boolean
        default: false
      RUN_CLIPPY:
        description: "Run clippy job"
        required: true
        type: boolean
        default: false

      RUN_CODEGEN:
        description: "Run codegen job"
        required: true
        type: boolean
        default: false

      RUN_UDEPS:
        description: "Run udeps job"
        required: true
        type: boolean
        default: false

      RUN_MSRV:
        description: "Run msrv job"
        required: true
        type: boolean
        default: false

      RUN_TEST:
        description: "Run test job"
        required: true
        type: boolean
        default: false

      RUN_DOC_TEST:
        description: "Run doc-test job"
        required: true
        type: boolean
        default: false

      RUN_DOC:
        description: "Run doc gen job"
        required: true
        type: boolean
        default: false

      RUN_SEMVER:
        description: "Run semver job"
        required: true
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  rustfmt:
    runs-on: ubuntu-latest
    if: ${{ vars.AUTO_RUN_FMT == 'true' || (github.event_name == 'workflow_dispatch' && inputs.RUN_FMT) }}
    steps:
      - uses: actions/checkout@v4
      - uses: hecrj/setup-rust-action@v2
        with:
          components: rustfmt
      - run: cargo fmt --all --check

  clippy:
    runs-on: ubuntu-latest
    if: ${{ vars.AUTO_RUN_CLIPPY == 'true' || inputs.RUN_CLIPPY }}
    steps:
      - uses: actions/checkout@v4
      - uses: hecrj/setup-rust-action@v2
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - run: cargo clippy --workspace --all-features --all-targets -- --deny warnings

  codegen:
    runs-on: ubuntu-latest
    if: ${{ vars.AUTO_RUN_CODEGEN == 'true' || inputs.RUN_CODEGEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: hecrj/setup-rust-action@v2
      - uses: taiki-e/install-action@protoc
      - uses: Swatinem/rust-cache@v2
      - run: cargo run --bin tonic-generator
      - run: git diff --exit-code

  udeps:
    runs-on: ubuntu-latest
    if: ${{ vars.AUTO_RUN_UDEPS == 'true' || inputs.RUN_UDEPS }}
    steps:
      - uses: actions/checkout@v4
      - uses: hecrj/setup-rust-action@v2
        with:
          rust-version: nightly
      - uses: taiki-e/install-action@cargo-udeps
      - uses: taiki-e/install-action@protoc
      - uses: Swatinem/rust-cache@v2
      - run: cargo udeps

  msrv:
    runs-on: ubuntu-latest
    if: ${{ vars.AUTO_RUN_MSRV == 'true' || inputs.RUN_MSRV }}
    steps:
      - uses: actions/checkout@v4
      - uses: hecrj/setup-rust-action@v2
      - name: Resolve MSRV aware dependencies
        run: cargo update
        env:
          CARGO_RESOLVER_INCOMPATIBLE_RUST_VERSIONS: fallback
      - name: Get MSRV from manifest file
        id: msrv
        run: echo "version=$(yq '.workspace.package.rust-version' Cargo.toml)" >> $GITHUB_OUTPUT
      - uses: hecrj/setup-rust-action@v2
        with:
          rust-version: ${{ steps.msrv.outputs.version }}
      - uses: taiki-e/install-action@cargo-no-dev-deps
      - uses: Swatinem/rust-cache@v2
      - run: cargo no-dev-deps --no-private check --all-features
      - run: cargo no-dev-deps --no-private doc --no-deps --all-features
        env:
          RUSTDOCFLAGS: "-D warnings"

  test:
    runs-on: ubuntu-latest
    if: ${{ vars.AUTO_RUN_TEST == 'true' || inputs.RUN_TEST }}
    steps:
      - uses: actions/checkout@v4
      - uses: hecrj/setup-rust-action@v2
      - uses: taiki-e/install-action@protoc
      - uses: taiki-e/install-action@cargo-nextest
      - uses: Swatinem/rust-cache@v2
      - run: cargo nextest run --workspace --all-features

  doc:
    runs-on: ubuntu-latest
    if: ${{ vars.AUTO_RUN_DOC == 'true' || inputs.RUN_DOC }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
      - uses: dtolnay/install@cargo-docs-rs
      - run: cargo docs-rs -p soda-pool
      - run: cargo docs-rs -p soda-pool-build

  doc-test:
    runs-on: ubuntu-latest
    if: ${{ vars.AUTO_RUN_DOC_TEST == 'true' || inputs.RUN_DOC_TEST }}
    steps:
      - uses: actions/checkout@v4
      - uses: hecrj/setup-rust-action@v2
      - uses: Swatinem/rust-cache@v2
      - run: cargo test --doc --all-features

  semver:
    runs-on: ubuntu-latest
    if: ${{ vars.AUTO_RUN_SEMVER == 'true' || inputs.RUN_SEMVER }}
    steps:
      - uses: actions/checkout@v4
      - uses: obi1kenobi/cargo-semver-checks-action@v2
        with:
          feature-group: all-features

# Coverage? https://github.com/taiki-e/cargo-llvm-cov
